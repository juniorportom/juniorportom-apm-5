var re1 = new RegExp("abc");   Se puden definir de las dos formas 
var re2 = /abc/;

var eighteenPlus = /eighteen\+/;

console.log(/abc/.test("abcde"));
// → true
console.log(/abc/.test("abxde"));
// → false

console.log(/[0123456789]/.test("in 1992"));
// → true
console.log(/[0-9]/.test("in 1992"));
// → true

There are a number of common character groups that have their own built-in shortcuts. Digits are one of them: \d means the same thing as [0-9].

\d  Any digit character
\w  An alphanumeric character (“word character”)
\s  Any whitespace character (space, tab, newline, and similar)
\D  A character that is not a digit
\W  A nonalphanumeric character
\S  A nonwhitespace character
. Any character except for newline

var dateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(dateTime.test("30-01-2003 15:20"));
// → true
console.log(dateTime.test("30-jan-2003 15:20"));
// → false

var notBinary = /[^01]/;
console.log(notBinary.test("1100100010100110"));
// → false
console.log(notBinary.test("1100100010200110"));
// → true

When you put a plus sign (+) after something in a regular expression, it indicates that the element may be repeated more than once. Thus, /\d+/ matches one or more digit characters.

console.log(/'\d+'/.test("'123'"));
// → true
console.log(/'\d+'/.test("''"));
// → false
console.log(/'\d*'/.test("'123'"));
// → true
console.log(/'\d*'/.test("''"));
// → true
The star (*) has a similar meaning but also allows the pattern to match zero times. Something with a star after it never prevents a pattern from matching—it’ll just match zero instances if it can’t find any suitable text to match.

A question mark makes a part of a pattern “optional”, meaning it may occur zero or one time. In the following example, the u character is allowed to occur, but the pattern also matches when it is missing.

var neighbor = /neighbou?r/;
console.log(neighbor.test("neighbour"));
// → true
console.log(neighbor.test("neighbor"));
// → true

To indicate that a pattern should occur a precise number of times, use curly braces. Putting {4} after an element, for example, requires it to occur exactly four times. It is also possible to specify a range this way: {2,4} means the element must occur at least twice and at most four times.

var dateTime = /\d{1,2}-\d{1,2}-\d{4} \d{1,2}:\d{2}/;
console.log(dateTime.test("30-1-2003 8:45"));
// → true

Usando las llaves un numero y coma, se especifica que la secuencia deberia estar como minimo 5 veces o mas {5,} means five or more times.

To use an operator like * or + on more than one element at a time, you can use parentheses. A part of a regular expression that is enclosed in parentheses counts as a single element as far as the operators following it are concerned.

var cartoonCrying = /boo+(hoo+)+/i;
console.log(cartoonCrying.test("Boohoooohoohooo"));
// → true

The test method is the absolute simplest way to match a regular expression. It tells you only whether it matched and nothing else. Regular expressions also have an exec (execute) method that will return null if no match was found and return an object with information about the match otherwise.

var match = /\d+/.exec("one two 100");
console.log(match);
// → ["100"]
console.log(match.index);
// → 8

var quotedText = /'([^']*)'/;
console.log(quotedText.exec("she said 'hello'"));
// → ["'hello'", "hello"]

function findDate(string) {
  var dateTime = /(\d{1,2})-(\d{1,2})-(\d{4})/;
  var match = dateTime.exec(string);
  return new Date(Number(match[3]),
                  Number(match[2]) - 1,
                  Number(match[1]));
}
console.log(findDate("30-1-2003"));
// → Thu Jan 30 2003 00:00:00 GMT+0100 (CET)

If we want to enforce that the match must span the whole string, we can add the markers ^ and $. The caret matches the start of the input string, while the dollar sign matches the end. So, /^\d+$/ matches a string consisting entirely of one or more digits, /^!/ matches any string that starts with an exclamation mark, and /x^/ does not match any string (there cannot be an x before the start of the string).

console.log(/cat/.test("concatenate"));
// → true
console.log(/\bcat\b/.test("concatenate"));
// → false

var animalCount = /\b\d+ (pig|cow|chicken)s?\b/;
console.log(animalCount.test("15 pigs"));
// → true
console.log(animalCount.test("15 pigchickens"));
// → false

console.log("papa".replace("p", "m"));
// → mapa

console.log("Borobudur".replace(/[ou]/, "a"));
// → Barobudur
console.log("Borobudur".replace(/[ou]/g, "a"));
// → Barabadar

console.log(
  "Hopper, Grace\nMcCarthy, John\nRitchie, Dennis"
    .replace(/([\w ]+), ([\w ]+)/g, "$2 $1"));
// → Grace Hopper
//   John McCarthy
//   Dennis Ritchie

var s = "the cia and fbi";
console.log(s.replace(/\b(fbi|cia)\b/g, function(str) {
  return str.toUpperCase();
}));
// → the CIA and FBI

function stripComments(code) {
  return code.replace(/\/\/.*|\/\*[^]*\*\//g, "");
}
console.log(stripComments("1 + /* 2 */3"));
// → 1 + 3
console.log(stripComments("x = 10;// ten!"));
// → x = 10;
console.log(stripComments("1 /* a */+/* b */ 1"));
// → 1  1

console.log("  word".search(/\S/));
// → 2
console.log("    ".search(/\S/));
// → -1


Regular expressions are objects that represent patterns in strings. They use their own syntax to express these patterns.

/abc/ A sequence of characters
/[abc]/ Any character from a set of characters
/[^abc]/  Any character not in a set of characters
/[0-9]/ Any character in a range of characters
/x+/  One or more occurrences of the pattern x
/x+?/ One or more occurrences, nongreedy
/x*/  Zero or more occurrences
/x?/  Zero or one occurrence
/x{2,4}/  Between two and four occurrences
/(abc)/ A group
/a|b|c/ Any one of several patterns
/\d/  Any digit character
/\w/  An alphanumeric character (“word character”)
/\s/  Any whitespace character
/./ Any character except newlines
/\b/  A word boundary
/^/ Start of input
/$/ End of input

\
^   Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.
$   Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character
*   Matches the preceding expression 0 or more times. Equivalent to {0,}.
+   Matches the preceding expression 1 or more times. Equivalent to {1,}.
?   Matches the preceding expression 0 or 1 time. Equivalent to {0,1}.
.   (The decimal point) matches any single character except the newline character.
(x)   Matches 'x' and remembers the match, as the following example shows. The parentheses are called capturing parentheses.
(?:x)   Matches 'x' but does not remember the match. The parentheses are called non-capturing parentheses, and let you define     subexpressions for regular expression operators to work with
x(?=y)    Matches 'x' only if 'x' is followed by 'y'. This is called a lookahead.
x(?!y)    Matches 'x' only if 'x' is not followed by 'y'. This is called a negated lookahead
x|you     Matches either 'x' or 'y'.
{n}       Matches exactly n occurrences of the preceding expression. N must be a positive integer.
{n,m}     Where n and m are positive integers and n <= m. Matches at least n and at most m occurrences of the preceding expression. When m is omitted, it's treated as ∞.
[xyz]     Character set. This pattern type matches any one of the characters in the brackets, including escape sequences
[a-d]     which performs the same match as [abcd]
[^xyz]    A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen. Everything that works in the normal character set also works here.
[\b]    Matches a backspace (U+0008). You need to use square brackets if you want to match a literal backspace character. (Not to be confused with \b.)
\B      Matches a non-word boundary.
\cX     Where X is a character ranging from A to Z. Matches a control character in a string.  For example, /\cM/ matches control-M (U+000D) in a string.
\d      Matches a digit character. Equivalent to [0-9].
\D      Matches any non-digit character. Equivalent to [^0-9].
\f        Matches a form feed (U+000C).
\n  Matches a line feed (U+000A).
\r  Matches a carriage return (U+000D).
\s  Matches a single white space character, including space, tab, form feed, line feed. Equivalent to [ \f\n\r\t\v\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff].
\S    Matches a single character other than white space. Equivalent to [^ \f\n\r\t\v\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff].
\t  Matches a tab (U+0009).
\v  Matches a vertical tab (U+000B).
\w   Matches any alphanumeric character including the underscore. Equivalent to [A-Za-z0-9_].
\W    Matches any non-word character. Equivalent to [^A-Za-z0-9_].
\n    Where n is a positive integer, a back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).
\0    Matches a NULL (U+0000) character. Do not follow this with another digit, because \0
\xhh  Matches the character with the code hh (two hexadecimal digits)
\uhhhh  Matches the character with the code hhhh (four hexadecimal digits).
\u{hhhh}  (only when u flag is set) Matches the character with the Unicode value hhhh (hexadecimal digits).


Method  Description
exec  A RegExp method that executes a search for a match in a string. It returns an array of information.
test  A RegExp method that tests for a match in a string. It returns true or false.
match A String method that executes a search for a match in a string. It returns an array of information or null on a mismatch.
search  A String method that tests for a match in a string. It returns the index of the match, or -1 if the search fails.
replace A String method that executes a search for a match in a string, and replaces the matched substring with a replacement substring.
split A String method that uses a regular expression or a fixed string to break a string into an array of substrings.


Flag  Description
g Global search.
i Case-insensitive search.
m Multi-line search.
y Perform a "sticky" search that matches starting at the current position in the target string. See sticky

var re = /pattern/flags;    Estas fomras pueden ayudar a usar  los flags
var re = new RegExp("pattern", "flags");

ej:
var re = /\w+\s/g;
var re = new RegExp("\\w+\\s", "g");